/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 3/1/14 2:03 PM
 */
package etosha.oldtimer.wiki;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
 *
 * This class manages access to these properties:
 * <ul>
 *   <li>Changedby</li>
 *   <li>CreationDate</li>
 *   <li>Foaf_knows</li>
 *   <li>Hasstudent</li>
 *   <li>Imports</li>
 *   <li>Owner</li>
 *   <li>Page</li>
 *   <li>Property_3ABornin</li>
 *   <li>Property_3AHeight</li>
 *   <li>Property_3AModificationdate_23aux</li>
 *   <li>Property_3AWorkson</li>
 *   <li>Sfchart_wasCreatedBy</li>
 *   <li>SpecialPropertyASK</li>
 *   <li>SpecialPropertyERRP</li>
 *   <li>TermcurrentProject</li>
 *   <li>Termname</li>
 *   <li>Type</li>
 *   <li>WikiNamespace</li>
 *   <li>WikiPageModificationDate</li>
 *   <li>WikiPageSortKey</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 3/1/14 2:03 PM
 */
public class Thing1 extends org.ontoware.rdfreactor.schema.rdfs.Class {

    private static final long serialVersionUID = 6485261458384492023L;

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AChanged_by */
	public static final URI CHANGEDBY = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AChanged_by", false);

    /** http://semantic-mediawiki.org/swivt/1.0#creationDate */
	public static final URI CREATIONDATE = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#creationDate", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AFoaf-3Aknows */
	public static final URI FOAF_KNOWS = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AFoaf-3Aknows", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AHas_student */
	public static final URI HASSTUDENT = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AHas_student", false);

    /** http://www.w3.org/2002/07/owl#imports */
	public static final URI IMPORTS = new URIImpl("http://www.w3.org/2002/07/owl#imports", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AOwner */
	public static final URI OWNER = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AOwner", false);

    /** http://semantic-mediawiki.org/swivt/1.0#page */
	public static final URI PAGE = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#page", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3ABorn_in */
	public static final URI PROPERTY_3ABORNIN = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3ABorn_in", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AHeight */
	public static final URI PROPERTY_3AHEIGHT = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AHeight", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AModification_date-23aux */
	public static final URI PROPERTY_3AMODIFICATIONDATE_23AUX = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AModification_date-23aux", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AWorks_on */
	public static final URI PROPERTY_3AWORKSON = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AWorks_on", false);

    /** http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3ASfchart-3AwasCreatedBy */
	public static final URI SFCHART_WASCREATEDBY = new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3ASfchart-3AwasCreatedBy", false);

    /** http://semantic-mediawiki.org/swivt/1.0#specialProperty_ASK */
	public static final URI SPECIALPROPERTYASK = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#specialProperty_ASK", false);

    /** http://semantic-mediawiki.org/swivt/1.0#specialProperty_ERRP */
	public static final URI SPECIALPROPERTYERRP = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#specialProperty_ERRP", false);

    /** http://xmlns.com/foaf/0.1/#term_currentProject */
	public static final URI TERMCURRENTPROJECT = new URIImpl("http://xmlns.com/foaf/0.1/#term_currentProject", false);

    /** http://xmlns.com/foaf/0.1/#term_name */
	public static final URI TERMNAME = new URIImpl("http://xmlns.com/foaf/0.1/#term_name", false);

    /** http://semantic-mediawiki.org/swivt/1.0#type */
	public static final URI TYPE = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#type", false);

    /** http://semantic-mediawiki.org/swivt/1.0#wikiNamespace */
	public static final URI WIKINAMESPACE = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#wikiNamespace", false);

    /** http://semantic-mediawiki.org/swivt/1.0#wikiPageModificationDate */
	public static final URI WIKIPAGEMODIFICATIONDATE = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#wikiPageModificationDate", false);

    /** http://semantic-mediawiki.org/swivt/1.0#wikiPageSortKey */
	public static final URI WIKIPAGESORTKEY = new URIImpl("http://semantic-mediawiki.org/swivt/1.0#wikiPageSortKey", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AChanged_by", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#creationDate", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AFoaf-3Aknows", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AHas_student", false),
      new URIImpl("http://www.w3.org/2002/07/owl#imports", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AOwner", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#page", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3ABorn_in", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AHeight", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AModification_date-23aux", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3AWorks_on", false),
      new URIImpl("http://127.0.0.1/oldtimer/wiki/index.php?title=Special:URIResolver/Property-3ASfchart-3AwasCreatedBy", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#specialProperty_ASK", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#specialProperty_ERRP", false),
      new URIImpl("http://xmlns.com/foaf/0.1/#term_currentProject", false),
      new URIImpl("http://xmlns.com/foaf/0.1/#term_name", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#type", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#wikiNamespace", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#wikiPageModificationDate", false),
      new URIImpl("http://semantic-mediawiki.org/swivt/1.0#wikiPageSortKey", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected Thing1 (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public Thing1 (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public Thing1 (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public Thing1 (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public Thing1 (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing1 or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static Thing1 getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing1.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends Thing1> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing1.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, Thing1)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Changedby' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodChangedby_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.CHANGEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Changedby' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodChangedby_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.CHANGEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Changedby' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodChangedby_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.CHANGEDBY, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CreationDate' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodCreationDate_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.CREATIONDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CreationDate' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodCreationDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.CREATIONDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CreationDate' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodCreationDate_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.CREATIONDATE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Foaf_knows' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodFoaf_knows_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.FOAF_KNOWS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Foaf_knows' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodFoaf_knows_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.FOAF_KNOWS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Foaf_knows' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodFoaf_knows_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.FOAF_KNOWS, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Hasstudent' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodHasstudent_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.HASSTUDENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Hasstudent' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodHasstudent_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.HASSTUDENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Hasstudent' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodHasstudent_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.HASSTUDENT, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodImports_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.IMPORTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodImports_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.IMPORTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Imports' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodImports_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.IMPORTS, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Owner' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodOwner_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.OWNER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Owner' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodOwner_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.OWNER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Owner' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodOwner_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.OWNER, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Page' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodPage_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.PAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Page' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodPage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.PAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Page' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodPage_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.PAGE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Property_3ABornin' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodProperty_3ABornin_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.PROPERTY_3ABORNIN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Property_3ABornin' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodProperty_3ABornin_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.PROPERTY_3ABORNIN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Property_3ABornin' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodProperty_3ABornin_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.PROPERTY_3ABORNIN, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Property_3AHeight' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodProperty_3AHeight_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.PROPERTY_3AHEIGHT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Property_3AHeight' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodProperty_3AHeight_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.PROPERTY_3AHEIGHT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Property_3AHeight' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodProperty_3AHeight_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.PROPERTY_3AHEIGHT, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Property_3AModificationdate_23aux' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodProperty_3AModificationdate_23aux_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.PROPERTY_3AMODIFICATIONDATE_23AUX, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Property_3AModificationdate_23aux' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodProperty_3AModificationdate_23aux_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.PROPERTY_3AMODIFICATIONDATE_23AUX, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Property_3AModificationdate_23aux' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodProperty_3AModificationdate_23aux_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.PROPERTY_3AMODIFICATIONDATE_23AUX, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Property_3AWorkson' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodProperty_3AWorkson_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.PROPERTY_3AWORKSON, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Property_3AWorkson' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodProperty_3AWorkson_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.PROPERTY_3AWORKSON, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Property_3AWorkson' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodProperty_3AWorkson_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.PROPERTY_3AWORKSON, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sfchart_wasCreatedBy' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodSfchart_wasCreatedBy_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.SFCHART_WASCREATEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sfchart_wasCreatedBy' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodSfchart_wasCreatedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.SFCHART_WASCREATEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sfchart_wasCreatedBy' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodSfchart_wasCreatedBy_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.SFCHART_WASCREATEDBY, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SpecialPropertyASK' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodSpecialPropertyASK_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.SPECIALPROPERTYASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SpecialPropertyASK' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodSpecialPropertyASK_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.SPECIALPROPERTYASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SpecialPropertyASK' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodSpecialPropertyASK_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.SPECIALPROPERTYASK, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SpecialPropertyERRP' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodSpecialPropertyERRP_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.SPECIALPROPERTYERRP, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SpecialPropertyERRP' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodSpecialPropertyERRP_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.SPECIALPROPERTYERRP, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SpecialPropertyERRP' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodSpecialPropertyERRP_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.SPECIALPROPERTYERRP, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermcurrentProject' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodTermcurrentProject_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.TERMCURRENTPROJECT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermcurrentProject' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodTermcurrentProject_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.TERMCURRENTPROJECT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermcurrentProject' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodTermcurrentProject_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.TERMCURRENTPROJECT, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Termname' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodTermname_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.TERMNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Termname' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodTermname_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.TERMNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Termname' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodTermname_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.TERMNAME, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Type' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodType_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.TYPE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Type' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodType_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.TYPE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Type' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodType_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.TYPE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WikiNamespace' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodWikiNamespace_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.WIKINAMESPACE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WikiNamespace' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodWikiNamespace_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.WIKINAMESPACE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WikiNamespace' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodWikiNamespace_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.WIKINAMESPACE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WikiPageModificationDate' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodWikiPageModificationDate_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.WIKIPAGEMODIFICATIONDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WikiPageModificationDate' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodWikiPageModificationDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.WIKIPAGEMODIFICATIONDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WikiPageModificationDate' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodWikiPageModificationDate_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.WIKIPAGEMODIFICATIONDATE, objectValue, Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WikiPageSortKey' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static]
	 */
	public static ClosableIterator<Resource> getAllmodWikiPageSortKey_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing1.WIKIPAGESORTKEY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WikiPageSortKey' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic]
	 */
	public ClosableIterator<Resource> getAllmodWikiPageSortKey_Inverse() {
		return Base.getAll_Inverse(this.model, Thing1.WIKIPAGESORTKEY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WikiPageSortKey' to this Thing1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static]
	 */
	public static ReactorResult<Resource> getAllmodWikiPageSortKey_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing1.WIKIPAGESORTKEY, objectValue, Resource.class);
	}



    /**
     * Check if {@code Changedby} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodChangedby(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, CHANGEDBY);
	}

    /**
     * Check if {@code Changedby} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodChangedby() {
		return Base.has(this.model, this.getResource(), CHANGEDBY);
	}

    /**
     * Check if {@code Changedby} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodChangedby(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, CHANGEDBY, value);
	}

    /**
     * Check if {@code Changedby} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodChangedby( Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHANGEDBY, value);
	}

     /**
     * Get all values of property {@code Changedby} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodChangedby_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHANGEDBY);
	}

    /**
     * Get all values of property {@code Changedby} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodChangedby_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHANGEDBY, Node.class);
	}

    /**
     * Get all values of property {@code Changedby} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodChangedby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHANGEDBY);
	}

    /**
     * Get all values of property {@code Changedby} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodChangedby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHANGEDBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Changedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodChangedby(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHANGEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Changedby} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodChangedby_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHANGEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Changedby}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodChangedby() {
		return Base.getAll(this.model, this.getResource(), CHANGEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Changedby} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodChangedby_as() {
		return Base.getAll_as(this.model, this.getResource(), CHANGEDBY, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Changedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodChangedby(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, CHANGEDBY, value);
	}

    /**
     * Adds a value to property {@code Changedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodChangedby(Node value) {
		Base.add(this.model, this.getResource(), CHANGEDBY, value);
	}
    /**
     * Adds a value to property {@code Changedby} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodChangedby(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, CHANGEDBY, value);
	}

    /**
     * Adds a value to property {@code Changedby} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodChangedby(Thing1 value) {
		Base.add(this.model, this.getResource(), CHANGEDBY, value);
	}
  

    /**
     * Sets a value of property {@code Changedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodChangedby(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, CHANGEDBY, value);
	}

    /**
     * Sets a value of property {@code Changedby} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodChangedby(Node value) {
		Base.set(this.model, this.getResource(), CHANGEDBY, value);
	}
    /**
     * Sets a value of property {@code Changedby} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodChangedby(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, CHANGEDBY, value);
	}

    /**
     * Sets a value of property {@code Changedby} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodChangedby(Thing1 value) {
		Base.set(this.model, this.getResource(), CHANGEDBY, value);
	}
  


    /**
     * Removes a value of property {@code Changedby} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodChangedby(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, CHANGEDBY, value);
	}

    /**
     * Removes a value of property {@code Changedby} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodChangedby(Node value) {
		Base.remove(this.model, this.getResource(), CHANGEDBY, value);
	}
    /**
     * Removes a value of property {@code Changedby} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodChangedby(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, CHANGEDBY, value);
	}

    /**
     * Removes a value of property {@code Changedby} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodChangedby(Thing1 value) {
		Base.remove(this.model, this.getResource(), CHANGEDBY, value);
	}
  
    /**
     * Removes all values of property {@code Changedby}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodChangedby(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHANGEDBY);
	}

    /**
     * Removes all values of property {@code Changedby}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodChangedby() {
		Base.removeAll(this.model, this.getResource(), CHANGEDBY);
	}
     /**
     * Check if {@code CreationDate} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodCreationDate(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, CREATIONDATE);
	}

    /**
     * Check if {@code CreationDate} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodCreationDate() {
		return Base.has(this.model, this.getResource(), CREATIONDATE);
	}

    /**
     * Check if {@code CreationDate} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodCreationDate(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Check if {@code CreationDate} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodCreationDate( Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATIONDATE, value);
	}

     /**
     * Get all values of property {@code CreationDate} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodCreationDate_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATIONDATE);
	}

    /**
     * Get all values of property {@code CreationDate} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodCreationDate_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATIONDATE, Node.class);
	}

    /**
     * Get all values of property {@code CreationDate} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodCreationDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATIONDATE);
	}

    /**
     * Get all values of property {@code CreationDate} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodCreationDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATIONDATE, Node.class);
	}
 
    /**
     * Get all values of property {@code CreationDate}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodCreationDate(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATIONDATE, Thing1.class);
	}

    /**
     * Get all values of property {@code CreationDate} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodCreationDate_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATIONDATE, Thing1.class);
	}

    /**
     * Get all values of property {@code CreationDate}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodCreationDate() {
		return Base.getAll(this.model, this.getResource(), CREATIONDATE, Thing1.class);
	}

    /**
     * Get all values of property {@code CreationDate} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodCreationDate_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATIONDATE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code CreationDate} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodCreationDate(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Adds a value to property {@code CreationDate} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodCreationDate(Node value) {
		Base.add(this.model, this.getResource(), CREATIONDATE, value);
	}
    /**
     * Adds a value to property {@code CreationDate} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodCreationDate(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Adds a value to property {@code CreationDate} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodCreationDate(Thing1 value) {
		Base.add(this.model, this.getResource(), CREATIONDATE, value);
	}
  

    /**
     * Sets a value of property {@code CreationDate} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodCreationDate(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Sets a value of property {@code CreationDate} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodCreationDate(Node value) {
		Base.set(this.model, this.getResource(), CREATIONDATE, value);
	}
    /**
     * Sets a value of property {@code CreationDate} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodCreationDate(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Sets a value of property {@code CreationDate} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodCreationDate(Thing1 value) {
		Base.set(this.model, this.getResource(), CREATIONDATE, value);
	}
  


    /**
     * Removes a value of property {@code CreationDate} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodCreationDate(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Removes a value of property {@code CreationDate} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodCreationDate(Node value) {
		Base.remove(this.model, this.getResource(), CREATIONDATE, value);
	}
    /**
     * Removes a value of property {@code CreationDate} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodCreationDate(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Removes a value of property {@code CreationDate} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodCreationDate(Thing1 value) {
		Base.remove(this.model, this.getResource(), CREATIONDATE, value);
	}
  
    /**
     * Removes all values of property {@code CreationDate}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodCreationDate(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATIONDATE);
	}

    /**
     * Removes all values of property {@code CreationDate}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodCreationDate() {
		Base.removeAll(this.model, this.getResource(), CREATIONDATE);
	}
     /**
     * Check if {@code Foaf_knows} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodFoaf_knows(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, FOAF_KNOWS);
	}

    /**
     * Check if {@code Foaf_knows} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodFoaf_knows() {
		return Base.has(this.model, this.getResource(), FOAF_KNOWS);
	}

    /**
     * Check if {@code Foaf_knows} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodFoaf_knows(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, FOAF_KNOWS, value);
	}

    /**
     * Check if {@code Foaf_knows} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodFoaf_knows( Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOAF_KNOWS, value);
	}

     /**
     * Get all values of property {@code Foaf_knows} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodFoaf_knows_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOAF_KNOWS);
	}

    /**
     * Get all values of property {@code Foaf_knows} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodFoaf_knows_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAF_KNOWS, Node.class);
	}

    /**
     * Get all values of property {@code Foaf_knows} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodFoaf_knows_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOAF_KNOWS);
	}

    /**
     * Get all values of property {@code Foaf_knows} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodFoaf_knows_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOAF_KNOWS, Node.class);
	}
 
    /**
     * Get all values of property {@code Foaf_knows}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodFoaf_knows(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOAF_KNOWS, Thing1.class);
	}

    /**
     * Get all values of property {@code Foaf_knows} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodFoaf_knows_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAF_KNOWS, Thing1.class);
	}

    /**
     * Get all values of property {@code Foaf_knows}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodFoaf_knows() {
		return Base.getAll(this.model, this.getResource(), FOAF_KNOWS, Thing1.class);
	}

    /**
     * Get all values of property {@code Foaf_knows} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodFoaf_knows_as() {
		return Base.getAll_as(this.model, this.getResource(), FOAF_KNOWS, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Foaf_knows} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodFoaf_knows(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, FOAF_KNOWS, value);
	}

    /**
     * Adds a value to property {@code Foaf_knows} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodFoaf_knows(Node value) {
		Base.add(this.model, this.getResource(), FOAF_KNOWS, value);
	}
    /**
     * Adds a value to property {@code Foaf_knows} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodFoaf_knows(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, FOAF_KNOWS, value);
	}

    /**
     * Adds a value to property {@code Foaf_knows} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodFoaf_knows(Thing1 value) {
		Base.add(this.model, this.getResource(), FOAF_KNOWS, value);
	}
  

    /**
     * Sets a value of property {@code Foaf_knows} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodFoaf_knows(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, FOAF_KNOWS, value);
	}

    /**
     * Sets a value of property {@code Foaf_knows} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodFoaf_knows(Node value) {
		Base.set(this.model, this.getResource(), FOAF_KNOWS, value);
	}
    /**
     * Sets a value of property {@code Foaf_knows} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodFoaf_knows(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, FOAF_KNOWS, value);
	}

    /**
     * Sets a value of property {@code Foaf_knows} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodFoaf_knows(Thing1 value) {
		Base.set(this.model, this.getResource(), FOAF_KNOWS, value);
	}
  


    /**
     * Removes a value of property {@code Foaf_knows} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodFoaf_knows(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, FOAF_KNOWS, value);
	}

    /**
     * Removes a value of property {@code Foaf_knows} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodFoaf_knows(Node value) {
		Base.remove(this.model, this.getResource(), FOAF_KNOWS, value);
	}
    /**
     * Removes a value of property {@code Foaf_knows} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodFoaf_knows(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, FOAF_KNOWS, value);
	}

    /**
     * Removes a value of property {@code Foaf_knows} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodFoaf_knows(Thing1 value) {
		Base.remove(this.model, this.getResource(), FOAF_KNOWS, value);
	}
  
    /**
     * Removes all values of property {@code Foaf_knows}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodFoaf_knows(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOAF_KNOWS);
	}

    /**
     * Removes all values of property {@code Foaf_knows}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodFoaf_knows() {
		Base.removeAll(this.model, this.getResource(), FOAF_KNOWS);
	}
     /**
     * Check if {@code Hasstudent} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodHasstudent(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, HASSTUDENT);
	}

    /**
     * Check if {@code Hasstudent} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodHasstudent() {
		return Base.has(this.model, this.getResource(), HASSTUDENT);
	}

    /**
     * Check if {@code Hasstudent} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodHasstudent(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, HASSTUDENT, value);
	}

    /**
     * Check if {@code Hasstudent} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodHasstudent( Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASSTUDENT, value);
	}

     /**
     * Get all values of property {@code Hasstudent} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodHasstudent_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASSTUDENT);
	}

    /**
     * Get all values of property {@code Hasstudent} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodHasstudent_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASSTUDENT, Node.class);
	}

    /**
     * Get all values of property {@code Hasstudent} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodHasstudent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASSTUDENT);
	}

    /**
     * Get all values of property {@code Hasstudent} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodHasstudent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASSTUDENT, Node.class);
	}
 
    /**
     * Get all values of property {@code Hasstudent}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodHasstudent(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASSTUDENT, Thing1.class);
	}

    /**
     * Get all values of property {@code Hasstudent} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodHasstudent_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASSTUDENT, Thing1.class);
	}

    /**
     * Get all values of property {@code Hasstudent}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodHasstudent() {
		return Base.getAll(this.model, this.getResource(), HASSTUDENT, Thing1.class);
	}

    /**
     * Get all values of property {@code Hasstudent} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodHasstudent_as() {
		return Base.getAll_as(this.model, this.getResource(), HASSTUDENT, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Hasstudent} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodHasstudent(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, HASSTUDENT, value);
	}

    /**
     * Adds a value to property {@code Hasstudent} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodHasstudent(Node value) {
		Base.add(this.model, this.getResource(), HASSTUDENT, value);
	}
    /**
     * Adds a value to property {@code Hasstudent} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodHasstudent(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, HASSTUDENT, value);
	}

    /**
     * Adds a value to property {@code Hasstudent} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodHasstudent(Thing1 value) {
		Base.add(this.model, this.getResource(), HASSTUDENT, value);
	}
  

    /**
     * Sets a value of property {@code Hasstudent} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodHasstudent(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, HASSTUDENT, value);
	}

    /**
     * Sets a value of property {@code Hasstudent} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodHasstudent(Node value) {
		Base.set(this.model, this.getResource(), HASSTUDENT, value);
	}
    /**
     * Sets a value of property {@code Hasstudent} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodHasstudent(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, HASSTUDENT, value);
	}

    /**
     * Sets a value of property {@code Hasstudent} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodHasstudent(Thing1 value) {
		Base.set(this.model, this.getResource(), HASSTUDENT, value);
	}
  


    /**
     * Removes a value of property {@code Hasstudent} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodHasstudent(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, HASSTUDENT, value);
	}

    /**
     * Removes a value of property {@code Hasstudent} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodHasstudent(Node value) {
		Base.remove(this.model, this.getResource(), HASSTUDENT, value);
	}
    /**
     * Removes a value of property {@code Hasstudent} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodHasstudent(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, HASSTUDENT, value);
	}

    /**
     * Removes a value of property {@code Hasstudent} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodHasstudent(Thing1 value) {
		Base.remove(this.model, this.getResource(), HASSTUDENT, value);
	}
  
    /**
     * Removes all values of property {@code Hasstudent}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodHasstudent(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASSTUDENT);
	}

    /**
     * Removes all values of property {@code Hasstudent}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodHasstudent() {
		Base.removeAll(this.model, this.getResource(), HASSTUDENT);
	}
     /**
     * Check if {@code Imports} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodImports(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, IMPORTS);
	}

    /**
     * Check if {@code Imports} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodImports() {
		return Base.has(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Check if {@code Imports} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodImports(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, IMPORTS, value);
	}

    /**
     * Check if {@code Imports} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodImports( Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMPORTS, value);
	}

     /**
     * Get all values of property {@code Imports} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodImports_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMPORTS);
	}

    /**
     * Get all values of property {@code Imports} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodImports_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, Node.class);
	}

    /**
     * Get all values of property {@code Imports} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodImports_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Get all values of property {@code Imports} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodImports_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, Node.class);
	}
 
    /**
     * Get all values of property {@code Imports}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodImports(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMPORTS, Thing1.class);
	}

    /**
     * Get all values of property {@code Imports} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodImports_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, Thing1.class);
	}

    /**
     * Get all values of property {@code Imports}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodImports() {
		return Base.getAll(this.model, this.getResource(), IMPORTS, Thing1.class);
	}

    /**
     * Get all values of property {@code Imports} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodImports_as() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Imports} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodImports(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}

    /**
     * Adds a value to property {@code Imports} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodImports(Node value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Adds a value to property {@code Imports} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodImports(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}

    /**
     * Adds a value to property {@code Imports} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodImports(Thing1 value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
  

    /**
     * Sets a value of property {@code Imports} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodImports(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}

    /**
     * Sets a value of property {@code Imports} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodImports(Node value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Sets a value of property {@code Imports} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodImports(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}

    /**
     * Sets a value of property {@code Imports} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodImports(Thing1 value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
  


    /**
     * Removes a value of property {@code Imports} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodImports(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}

    /**
     * Removes a value of property {@code Imports} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodImports(Node value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Removes a value of property {@code Imports} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodImports(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}

    /**
     * Removes a value of property {@code Imports} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodImports(Thing1 value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
  
    /**
     * Removes all values of property {@code Imports}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodImports(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMPORTS);
	}

    /**
     * Removes all values of property {@code Imports}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodImports() {
		Base.removeAll(this.model, this.getResource(), IMPORTS);
	}
     /**
     * Check if {@code Owner} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodOwner(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, OWNER);
	}

    /**
     * Check if {@code Owner} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodOwner() {
		return Base.has(this.model, this.getResource(), OWNER);
	}

    /**
     * Check if {@code Owner} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodOwner(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, OWNER, value);
	}

    /**
     * Check if {@code Owner} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodOwner( Node value ) {
		return Base.hasValue(this.model, this.getResource(), OWNER, value);
	}

     /**
     * Get all values of property {@code Owner} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodOwner_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OWNER);
	}

    /**
     * Get all values of property {@code Owner} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodOwner_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OWNER, Node.class);
	}

    /**
     * Get all values of property {@code Owner} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodOwner_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OWNER);
	}

    /**
     * Get all values of property {@code Owner} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodOwner_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OWNER, Node.class);
	}
 
    /**
     * Get all values of property {@code Owner}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodOwner(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, OWNER, Thing1.class);
	}

    /**
     * Get all values of property {@code Owner} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodOwner_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OWNER, Thing1.class);
	}

    /**
     * Get all values of property {@code Owner}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodOwner() {
		return Base.getAll(this.model, this.getResource(), OWNER, Thing1.class);
	}

    /**
     * Get all values of property {@code Owner} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodOwner_as() {
		return Base.getAll_as(this.model, this.getResource(), OWNER, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Owner} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodOwner(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, OWNER, value);
	}

    /**
     * Adds a value to property {@code Owner} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodOwner(Node value) {
		Base.add(this.model, this.getResource(), OWNER, value);
	}
    /**
     * Adds a value to property {@code Owner} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodOwner(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, OWNER, value);
	}

    /**
     * Adds a value to property {@code Owner} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodOwner(Thing1 value) {
		Base.add(this.model, this.getResource(), OWNER, value);
	}
  

    /**
     * Sets a value of property {@code Owner} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodOwner(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, OWNER, value);
	}

    /**
     * Sets a value of property {@code Owner} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodOwner(Node value) {
		Base.set(this.model, this.getResource(), OWNER, value);
	}
    /**
     * Sets a value of property {@code Owner} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodOwner(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, OWNER, value);
	}

    /**
     * Sets a value of property {@code Owner} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodOwner(Thing1 value) {
		Base.set(this.model, this.getResource(), OWNER, value);
	}
  


    /**
     * Removes a value of property {@code Owner} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodOwner(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, OWNER, value);
	}

    /**
     * Removes a value of property {@code Owner} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodOwner(Node value) {
		Base.remove(this.model, this.getResource(), OWNER, value);
	}
    /**
     * Removes a value of property {@code Owner} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodOwner(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, OWNER, value);
	}

    /**
     * Removes a value of property {@code Owner} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodOwner(Thing1 value) {
		Base.remove(this.model, this.getResource(), OWNER, value);
	}
  
    /**
     * Removes all values of property {@code Owner}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodOwner(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, OWNER);
	}

    /**
     * Removes all values of property {@code Owner}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodOwner() {
		Base.removeAll(this.model, this.getResource(), OWNER);
	}
     /**
     * Check if {@code Page} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodPage(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PAGE);
	}

    /**
     * Check if {@code Page} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodPage() {
		return Base.has(this.model, this.getResource(), PAGE);
	}

    /**
     * Check if {@code Page} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodPage(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PAGE, value);
	}

    /**
     * Check if {@code Page} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodPage( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAGE, value);
	}

     /**
     * Get all values of property {@code Page} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodPage_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAGE);
	}

    /**
     * Get all values of property {@code Page} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodPage_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, Node.class);
	}

    /**
     * Get all values of property {@code Page} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAGE);
	}

    /**
     * Get all values of property {@code Page} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, Node.class);
	}
 
    /**
     * Get all values of property {@code Page}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodPage(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAGE, Thing1.class);
	}

    /**
     * Get all values of property {@code Page} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodPage_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, Thing1.class);
	}

    /**
     * Get all values of property {@code Page}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodPage() {
		return Base.getAll(this.model, this.getResource(), PAGE, Thing1.class);
	}

    /**
     * Get all values of property {@code Page} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodPage_as() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Page} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodPage(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PAGE, value);
	}

    /**
     * Adds a value to property {@code Page} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodPage(Node value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Adds a value to property {@code Page} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodPage(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, PAGE, value);
	}

    /**
     * Adds a value to property {@code Page} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodPage(Thing1 value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
  

    /**
     * Sets a value of property {@code Page} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodPage(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PAGE, value);
	}

    /**
     * Sets a value of property {@code Page} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodPage(Node value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Sets a value of property {@code Page} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodPage(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, PAGE, value);
	}

    /**
     * Sets a value of property {@code Page} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodPage(Thing1 value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
  


    /**
     * Removes a value of property {@code Page} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodPage(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PAGE, value);
	}

    /**
     * Removes a value of property {@code Page} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodPage(Node value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Removes a value of property {@code Page} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodPage(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, PAGE, value);
	}

    /**
     * Removes a value of property {@code Page} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodPage(Thing1 value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
  
    /**
     * Removes all values of property {@code Page}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodPage(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAGE);
	}

    /**
     * Removes all values of property {@code Page}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodPage() {
		Base.removeAll(this.model, this.getResource(), PAGE);
	}
     /**
     * Check if {@code Property_3ABornin} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodProperty_3ABornin(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTY_3ABORNIN);
	}

    /**
     * Check if {@code Property_3ABornin} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodProperty_3ABornin() {
		return Base.has(this.model, this.getResource(), PROPERTY_3ABORNIN);
	}

    /**
     * Check if {@code Property_3ABornin} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodProperty_3ABornin(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTY_3ABORNIN, value);
	}

    /**
     * Check if {@code Property_3ABornin} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodProperty_3ABornin( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTY_3ABORNIN, value);
	}

     /**
     * Get all values of property {@code Property_3ABornin} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodProperty_3ABornin_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTY_3ABORNIN);
	}

    /**
     * Get all values of property {@code Property_3ABornin} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodProperty_3ABornin_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3ABORNIN, Node.class);
	}

    /**
     * Get all values of property {@code Property_3ABornin} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodProperty_3ABornin_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTY_3ABORNIN);
	}

    /**
     * Get all values of property {@code Property_3ABornin} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodProperty_3ABornin_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3ABORNIN, Node.class);
	}
 
    /**
     * Get all values of property {@code Property_3ABornin}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodProperty_3ABornin(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTY_3ABORNIN, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3ABornin} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodProperty_3ABornin_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3ABORNIN, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3ABornin}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodProperty_3ABornin() {
		return Base.getAll(this.model, this.getResource(), PROPERTY_3ABORNIN, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3ABornin} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodProperty_3ABornin_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3ABORNIN, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Property_3ABornin} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodProperty_3ABornin(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PROPERTY_3ABORNIN, value);
	}

    /**
     * Adds a value to property {@code Property_3ABornin} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodProperty_3ABornin(Node value) {
		Base.add(this.model, this.getResource(), PROPERTY_3ABORNIN, value);
	}
    /**
     * Adds a value to property {@code Property_3ABornin} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodProperty_3ABornin(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, PROPERTY_3ABORNIN, value);
	}

    /**
     * Adds a value to property {@code Property_3ABornin} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodProperty_3ABornin(Thing1 value) {
		Base.add(this.model, this.getResource(), PROPERTY_3ABORNIN, value);
	}
  

    /**
     * Sets a value of property {@code Property_3ABornin} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodProperty_3ABornin(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PROPERTY_3ABORNIN, value);
	}

    /**
     * Sets a value of property {@code Property_3ABornin} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodProperty_3ABornin(Node value) {
		Base.set(this.model, this.getResource(), PROPERTY_3ABORNIN, value);
	}
    /**
     * Sets a value of property {@code Property_3ABornin} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodProperty_3ABornin(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, PROPERTY_3ABORNIN, value);
	}

    /**
     * Sets a value of property {@code Property_3ABornin} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodProperty_3ABornin(Thing1 value) {
		Base.set(this.model, this.getResource(), PROPERTY_3ABORNIN, value);
	}
  


    /**
     * Removes a value of property {@code Property_3ABornin} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodProperty_3ABornin(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PROPERTY_3ABORNIN, value);
	}

    /**
     * Removes a value of property {@code Property_3ABornin} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodProperty_3ABornin(Node value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3ABORNIN, value);
	}
    /**
     * Removes a value of property {@code Property_3ABornin} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodProperty_3ABornin(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, PROPERTY_3ABORNIN, value);
	}

    /**
     * Removes a value of property {@code Property_3ABornin} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodProperty_3ABornin(Thing1 value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3ABORNIN, value);
	}
  
    /**
     * Removes all values of property {@code Property_3ABornin}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodProperty_3ABornin(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTY_3ABORNIN);
	}

    /**
     * Removes all values of property {@code Property_3ABornin}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodProperty_3ABornin() {
		Base.removeAll(this.model, this.getResource(), PROPERTY_3ABORNIN);
	}
     /**
     * Check if {@code Property_3AHeight} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodProperty_3AHeight(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTY_3AHEIGHT);
	}

    /**
     * Check if {@code Property_3AHeight} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodProperty_3AHeight() {
		return Base.has(this.model, this.getResource(), PROPERTY_3AHEIGHT);
	}

    /**
     * Check if {@code Property_3AHeight} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodProperty_3AHeight(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTY_3AHEIGHT, value);
	}

    /**
     * Check if {@code Property_3AHeight} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodProperty_3AHeight( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTY_3AHEIGHT, value);
	}

     /**
     * Get all values of property {@code Property_3AHeight} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodProperty_3AHeight_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTY_3AHEIGHT);
	}

    /**
     * Get all values of property {@code Property_3AHeight} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodProperty_3AHeight_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3AHEIGHT, Node.class);
	}

    /**
     * Get all values of property {@code Property_3AHeight} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodProperty_3AHeight_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTY_3AHEIGHT);
	}

    /**
     * Get all values of property {@code Property_3AHeight} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodProperty_3AHeight_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3AHEIGHT, Node.class);
	}
 
    /**
     * Get all values of property {@code Property_3AHeight}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodProperty_3AHeight(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTY_3AHEIGHT, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AHeight} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodProperty_3AHeight_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3AHEIGHT, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AHeight}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodProperty_3AHeight() {
		return Base.getAll(this.model, this.getResource(), PROPERTY_3AHEIGHT, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AHeight} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodProperty_3AHeight_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3AHEIGHT, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Property_3AHeight} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodProperty_3AHeight(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PROPERTY_3AHEIGHT, value);
	}

    /**
     * Adds a value to property {@code Property_3AHeight} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodProperty_3AHeight(Node value) {
		Base.add(this.model, this.getResource(), PROPERTY_3AHEIGHT, value);
	}
    /**
     * Adds a value to property {@code Property_3AHeight} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodProperty_3AHeight(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, PROPERTY_3AHEIGHT, value);
	}

    /**
     * Adds a value to property {@code Property_3AHeight} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodProperty_3AHeight(Thing1 value) {
		Base.add(this.model, this.getResource(), PROPERTY_3AHEIGHT, value);
	}
  

    /**
     * Sets a value of property {@code Property_3AHeight} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodProperty_3AHeight(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PROPERTY_3AHEIGHT, value);
	}

    /**
     * Sets a value of property {@code Property_3AHeight} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodProperty_3AHeight(Node value) {
		Base.set(this.model, this.getResource(), PROPERTY_3AHEIGHT, value);
	}
    /**
     * Sets a value of property {@code Property_3AHeight} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodProperty_3AHeight(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, PROPERTY_3AHEIGHT, value);
	}

    /**
     * Sets a value of property {@code Property_3AHeight} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodProperty_3AHeight(Thing1 value) {
		Base.set(this.model, this.getResource(), PROPERTY_3AHEIGHT, value);
	}
  


    /**
     * Removes a value of property {@code Property_3AHeight} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodProperty_3AHeight(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PROPERTY_3AHEIGHT, value);
	}

    /**
     * Removes a value of property {@code Property_3AHeight} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodProperty_3AHeight(Node value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3AHEIGHT, value);
	}
    /**
     * Removes a value of property {@code Property_3AHeight} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodProperty_3AHeight(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, PROPERTY_3AHEIGHT, value);
	}

    /**
     * Removes a value of property {@code Property_3AHeight} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodProperty_3AHeight(Thing1 value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3AHEIGHT, value);
	}
  
    /**
     * Removes all values of property {@code Property_3AHeight}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodProperty_3AHeight(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTY_3AHEIGHT);
	}

    /**
     * Removes all values of property {@code Property_3AHeight}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodProperty_3AHeight() {
		Base.removeAll(this.model, this.getResource(), PROPERTY_3AHEIGHT);
	}
     /**
     * Check if {@code Property_3AModificationdate_23aux} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX);
	}

    /**
     * Check if {@code Property_3AModificationdate_23aux} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodProperty_3AModificationdate_23aux() {
		return Base.has(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX);
	}

    /**
     * Check if {@code Property_3AModificationdate_23aux} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

    /**
     * Check if {@code Property_3AModificationdate_23aux} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodProperty_3AModificationdate_23aux( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

     /**
     * Get all values of property {@code Property_3AModificationdate_23aux} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodProperty_3AModificationdate_23aux_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX);
	}

    /**
     * Get all values of property {@code Property_3AModificationdate_23aux} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodProperty_3AModificationdate_23aux_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, Node.class);
	}

    /**
     * Get all values of property {@code Property_3AModificationdate_23aux} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodProperty_3AModificationdate_23aux_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX);
	}

    /**
     * Get all values of property {@code Property_3AModificationdate_23aux} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodProperty_3AModificationdate_23aux_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, Node.class);
	}
 
    /**
     * Get all values of property {@code Property_3AModificationdate_23aux}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AModificationdate_23aux} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodProperty_3AModificationdate_23aux_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AModificationdate_23aux}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodProperty_3AModificationdate_23aux() {
		return Base.getAll(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AModificationdate_23aux} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodProperty_3AModificationdate_23aux_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Property_3AModificationdate_23aux} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

    /**
     * Adds a value to property {@code Property_3AModificationdate_23aux} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodProperty_3AModificationdate_23aux(Node value) {
		Base.add(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}
    /**
     * Adds a value to property {@code Property_3AModificationdate_23aux} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

    /**
     * Adds a value to property {@code Property_3AModificationdate_23aux} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodProperty_3AModificationdate_23aux(Thing1 value) {
		Base.add(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}
  

    /**
     * Sets a value of property {@code Property_3AModificationdate_23aux} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

    /**
     * Sets a value of property {@code Property_3AModificationdate_23aux} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodProperty_3AModificationdate_23aux(Node value) {
		Base.set(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}
    /**
     * Sets a value of property {@code Property_3AModificationdate_23aux} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

    /**
     * Sets a value of property {@code Property_3AModificationdate_23aux} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodProperty_3AModificationdate_23aux(Thing1 value) {
		Base.set(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}
  


    /**
     * Removes a value of property {@code Property_3AModificationdate_23aux} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodProperty_3AModificationdate_23aux(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

    /**
     * Removes a value of property {@code Property_3AModificationdate_23aux} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodProperty_3AModificationdate_23aux(Node value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}
    /**
     * Removes a value of property {@code Property_3AModificationdate_23aux} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodProperty_3AModificationdate_23aux(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}

    /**
     * Removes a value of property {@code Property_3AModificationdate_23aux} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodProperty_3AModificationdate_23aux(Thing1 value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX, value);
	}
  
    /**
     * Removes all values of property {@code Property_3AModificationdate_23aux}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodProperty_3AModificationdate_23aux(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTY_3AMODIFICATIONDATE_23AUX);
	}

    /**
     * Removes all values of property {@code Property_3AModificationdate_23aux}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodProperty_3AModificationdate_23aux() {
		Base.removeAll(this.model, this.getResource(), PROPERTY_3AMODIFICATIONDATE_23AUX);
	}
     /**
     * Check if {@code Property_3AWorkson} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodProperty_3AWorkson(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTY_3AWORKSON);
	}

    /**
     * Check if {@code Property_3AWorkson} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodProperty_3AWorkson() {
		return Base.has(this.model, this.getResource(), PROPERTY_3AWORKSON);
	}

    /**
     * Check if {@code Property_3AWorkson} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodProperty_3AWorkson(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTY_3AWORKSON, value);
	}

    /**
     * Check if {@code Property_3AWorkson} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodProperty_3AWorkson( Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTY_3AWORKSON, value);
	}

     /**
     * Get all values of property {@code Property_3AWorkson} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodProperty_3AWorkson_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTY_3AWORKSON);
	}

    /**
     * Get all values of property {@code Property_3AWorkson} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodProperty_3AWorkson_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3AWORKSON, Node.class);
	}

    /**
     * Get all values of property {@code Property_3AWorkson} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodProperty_3AWorkson_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTY_3AWORKSON);
	}

    /**
     * Get all values of property {@code Property_3AWorkson} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodProperty_3AWorkson_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3AWORKSON, Node.class);
	}
 
    /**
     * Get all values of property {@code Property_3AWorkson}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodProperty_3AWorkson(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTY_3AWORKSON, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AWorkson} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodProperty_3AWorkson_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY_3AWORKSON, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AWorkson}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodProperty_3AWorkson() {
		return Base.getAll(this.model, this.getResource(), PROPERTY_3AWORKSON, Thing1.class);
	}

    /**
     * Get all values of property {@code Property_3AWorkson} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodProperty_3AWorkson_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY_3AWORKSON, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Property_3AWorkson} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodProperty_3AWorkson(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, PROPERTY_3AWORKSON, value);
	}

    /**
     * Adds a value to property {@code Property_3AWorkson} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodProperty_3AWorkson(Node value) {
		Base.add(this.model, this.getResource(), PROPERTY_3AWORKSON, value);
	}
    /**
     * Adds a value to property {@code Property_3AWorkson} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodProperty_3AWorkson(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, PROPERTY_3AWORKSON, value);
	}

    /**
     * Adds a value to property {@code Property_3AWorkson} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodProperty_3AWorkson(Thing1 value) {
		Base.add(this.model, this.getResource(), PROPERTY_3AWORKSON, value);
	}
  

    /**
     * Sets a value of property {@code Property_3AWorkson} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodProperty_3AWorkson(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, PROPERTY_3AWORKSON, value);
	}

    /**
     * Sets a value of property {@code Property_3AWorkson} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodProperty_3AWorkson(Node value) {
		Base.set(this.model, this.getResource(), PROPERTY_3AWORKSON, value);
	}
    /**
     * Sets a value of property {@code Property_3AWorkson} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodProperty_3AWorkson(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, PROPERTY_3AWORKSON, value);
	}

    /**
     * Sets a value of property {@code Property_3AWorkson} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodProperty_3AWorkson(Thing1 value) {
		Base.set(this.model, this.getResource(), PROPERTY_3AWORKSON, value);
	}
  


    /**
     * Removes a value of property {@code Property_3AWorkson} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodProperty_3AWorkson(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, PROPERTY_3AWORKSON, value);
	}

    /**
     * Removes a value of property {@code Property_3AWorkson} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodProperty_3AWorkson(Node value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3AWORKSON, value);
	}
    /**
     * Removes a value of property {@code Property_3AWorkson} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodProperty_3AWorkson(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, PROPERTY_3AWORKSON, value);
	}

    /**
     * Removes a value of property {@code Property_3AWorkson} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodProperty_3AWorkson(Thing1 value) {
		Base.remove(this.model, this.getResource(), PROPERTY_3AWORKSON, value);
	}
  
    /**
     * Removes all values of property {@code Property_3AWorkson}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodProperty_3AWorkson(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTY_3AWORKSON);
	}

    /**
     * Removes all values of property {@code Property_3AWorkson}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodProperty_3AWorkson() {
		Base.removeAll(this.model, this.getResource(), PROPERTY_3AWORKSON);
	}
     /**
     * Check if {@code Sfchart_wasCreatedBy} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodSfchart_wasCreatedBy(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SFCHART_WASCREATEDBY);
	}

    /**
     * Check if {@code Sfchart_wasCreatedBy} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodSfchart_wasCreatedBy() {
		return Base.has(this.model, this.getResource(), SFCHART_WASCREATEDBY);
	}

    /**
     * Check if {@code Sfchart_wasCreatedBy} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodSfchart_wasCreatedBy(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SFCHART_WASCREATEDBY, value);
	}

    /**
     * Check if {@code Sfchart_wasCreatedBy} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodSfchart_wasCreatedBy( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SFCHART_WASCREATEDBY, value);
	}

     /**
     * Get all values of property {@code Sfchart_wasCreatedBy} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodSfchart_wasCreatedBy_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SFCHART_WASCREATEDBY);
	}

    /**
     * Get all values of property {@code Sfchart_wasCreatedBy} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodSfchart_wasCreatedBy_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SFCHART_WASCREATEDBY, Node.class);
	}

    /**
     * Get all values of property {@code Sfchart_wasCreatedBy} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodSfchart_wasCreatedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SFCHART_WASCREATEDBY);
	}

    /**
     * Get all values of property {@code Sfchart_wasCreatedBy} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodSfchart_wasCreatedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SFCHART_WASCREATEDBY, Node.class);
	}
 
    /**
     * Get all values of property {@code Sfchart_wasCreatedBy}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodSfchart_wasCreatedBy(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SFCHART_WASCREATEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Sfchart_wasCreatedBy} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodSfchart_wasCreatedBy_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SFCHART_WASCREATEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Sfchart_wasCreatedBy}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodSfchart_wasCreatedBy() {
		return Base.getAll(this.model, this.getResource(), SFCHART_WASCREATEDBY, Thing1.class);
	}

    /**
     * Get all values of property {@code Sfchart_wasCreatedBy} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodSfchart_wasCreatedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), SFCHART_WASCREATEDBY, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Sfchart_wasCreatedBy} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodSfchart_wasCreatedBy(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SFCHART_WASCREATEDBY, value);
	}

    /**
     * Adds a value to property {@code Sfchart_wasCreatedBy} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodSfchart_wasCreatedBy(Node value) {
		Base.add(this.model, this.getResource(), SFCHART_WASCREATEDBY, value);
	}
    /**
     * Adds a value to property {@code Sfchart_wasCreatedBy} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodSfchart_wasCreatedBy(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, SFCHART_WASCREATEDBY, value);
	}

    /**
     * Adds a value to property {@code Sfchart_wasCreatedBy} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodSfchart_wasCreatedBy(Thing1 value) {
		Base.add(this.model, this.getResource(), SFCHART_WASCREATEDBY, value);
	}
  

    /**
     * Sets a value of property {@code Sfchart_wasCreatedBy} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodSfchart_wasCreatedBy(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SFCHART_WASCREATEDBY, value);
	}

    /**
     * Sets a value of property {@code Sfchart_wasCreatedBy} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodSfchart_wasCreatedBy(Node value) {
		Base.set(this.model, this.getResource(), SFCHART_WASCREATEDBY, value);
	}
    /**
     * Sets a value of property {@code Sfchart_wasCreatedBy} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodSfchart_wasCreatedBy(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, SFCHART_WASCREATEDBY, value);
	}

    /**
     * Sets a value of property {@code Sfchart_wasCreatedBy} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodSfchart_wasCreatedBy(Thing1 value) {
		Base.set(this.model, this.getResource(), SFCHART_WASCREATEDBY, value);
	}
  


    /**
     * Removes a value of property {@code Sfchart_wasCreatedBy} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodSfchart_wasCreatedBy(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SFCHART_WASCREATEDBY, value);
	}

    /**
     * Removes a value of property {@code Sfchart_wasCreatedBy} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodSfchart_wasCreatedBy(Node value) {
		Base.remove(this.model, this.getResource(), SFCHART_WASCREATEDBY, value);
	}
    /**
     * Removes a value of property {@code Sfchart_wasCreatedBy} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodSfchart_wasCreatedBy(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, SFCHART_WASCREATEDBY, value);
	}

    /**
     * Removes a value of property {@code Sfchart_wasCreatedBy} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodSfchart_wasCreatedBy(Thing1 value) {
		Base.remove(this.model, this.getResource(), SFCHART_WASCREATEDBY, value);
	}
  
    /**
     * Removes all values of property {@code Sfchart_wasCreatedBy}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodSfchart_wasCreatedBy(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SFCHART_WASCREATEDBY);
	}

    /**
     * Removes all values of property {@code Sfchart_wasCreatedBy}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodSfchart_wasCreatedBy() {
		Base.removeAll(this.model, this.getResource(), SFCHART_WASCREATEDBY);
	}
     /**
     * Check if {@code SpecialPropertyASK} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodSpecialPropertyASK(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SPECIALPROPERTYASK);
	}

    /**
     * Check if {@code SpecialPropertyASK} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodSpecialPropertyASK() {
		return Base.has(this.model, this.getResource(), SPECIALPROPERTYASK);
	}

    /**
     * Check if {@code SpecialPropertyASK} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodSpecialPropertyASK(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SPECIALPROPERTYASK, value);
	}

    /**
     * Check if {@code SpecialPropertyASK} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodSpecialPropertyASK( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPECIALPROPERTYASK, value);
	}

     /**
     * Get all values of property {@code SpecialPropertyASK} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodSpecialPropertyASK_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPECIALPROPERTYASK);
	}

    /**
     * Get all values of property {@code SpecialPropertyASK} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodSpecialPropertyASK_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIALPROPERTYASK, Node.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyASK} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodSpecialPropertyASK_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPECIALPROPERTYASK);
	}

    /**
     * Get all values of property {@code SpecialPropertyASK} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodSpecialPropertyASK_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPECIALPROPERTYASK, Node.class);
	}
 
    /**
     * Get all values of property {@code SpecialPropertyASK}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodSpecialPropertyASK(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPECIALPROPERTYASK, Thing1.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyASK} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodSpecialPropertyASK_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIALPROPERTYASK, Thing1.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyASK}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodSpecialPropertyASK() {
		return Base.getAll(this.model, this.getResource(), SPECIALPROPERTYASK, Thing1.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyASK} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodSpecialPropertyASK_as() {
		return Base.getAll_as(this.model, this.getResource(), SPECIALPROPERTYASK, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code SpecialPropertyASK} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodSpecialPropertyASK(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SPECIALPROPERTYASK, value);
	}

    /**
     * Adds a value to property {@code SpecialPropertyASK} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodSpecialPropertyASK(Node value) {
		Base.add(this.model, this.getResource(), SPECIALPROPERTYASK, value);
	}
    /**
     * Adds a value to property {@code SpecialPropertyASK} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodSpecialPropertyASK(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, SPECIALPROPERTYASK, value);
	}

    /**
     * Adds a value to property {@code SpecialPropertyASK} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodSpecialPropertyASK(Thing1 value) {
		Base.add(this.model, this.getResource(), SPECIALPROPERTYASK, value);
	}
  

    /**
     * Sets a value of property {@code SpecialPropertyASK} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodSpecialPropertyASK(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SPECIALPROPERTYASK, value);
	}

    /**
     * Sets a value of property {@code SpecialPropertyASK} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodSpecialPropertyASK(Node value) {
		Base.set(this.model, this.getResource(), SPECIALPROPERTYASK, value);
	}
    /**
     * Sets a value of property {@code SpecialPropertyASK} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodSpecialPropertyASK(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, SPECIALPROPERTYASK, value);
	}

    /**
     * Sets a value of property {@code SpecialPropertyASK} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodSpecialPropertyASK(Thing1 value) {
		Base.set(this.model, this.getResource(), SPECIALPROPERTYASK, value);
	}
  


    /**
     * Removes a value of property {@code SpecialPropertyASK} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodSpecialPropertyASK(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SPECIALPROPERTYASK, value);
	}

    /**
     * Removes a value of property {@code SpecialPropertyASK} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodSpecialPropertyASK(Node value) {
		Base.remove(this.model, this.getResource(), SPECIALPROPERTYASK, value);
	}
    /**
     * Removes a value of property {@code SpecialPropertyASK} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodSpecialPropertyASK(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, SPECIALPROPERTYASK, value);
	}

    /**
     * Removes a value of property {@code SpecialPropertyASK} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodSpecialPropertyASK(Thing1 value) {
		Base.remove(this.model, this.getResource(), SPECIALPROPERTYASK, value);
	}
  
    /**
     * Removes all values of property {@code SpecialPropertyASK}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodSpecialPropertyASK(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPECIALPROPERTYASK);
	}

    /**
     * Removes all values of property {@code SpecialPropertyASK}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodSpecialPropertyASK() {
		Base.removeAll(this.model, this.getResource(), SPECIALPROPERTYASK);
	}
     /**
     * Check if {@code SpecialPropertyERRP} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodSpecialPropertyERRP(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SPECIALPROPERTYERRP);
	}

    /**
     * Check if {@code SpecialPropertyERRP} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodSpecialPropertyERRP() {
		return Base.has(this.model, this.getResource(), SPECIALPROPERTYERRP);
	}

    /**
     * Check if {@code SpecialPropertyERRP} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodSpecialPropertyERRP(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SPECIALPROPERTYERRP, value);
	}

    /**
     * Check if {@code SpecialPropertyERRP} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodSpecialPropertyERRP( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPECIALPROPERTYERRP, value);
	}

     /**
     * Get all values of property {@code SpecialPropertyERRP} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodSpecialPropertyERRP_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPECIALPROPERTYERRP);
	}

    /**
     * Get all values of property {@code SpecialPropertyERRP} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodSpecialPropertyERRP_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIALPROPERTYERRP, Node.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyERRP} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodSpecialPropertyERRP_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPECIALPROPERTYERRP);
	}

    /**
     * Get all values of property {@code SpecialPropertyERRP} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodSpecialPropertyERRP_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPECIALPROPERTYERRP, Node.class);
	}
 
    /**
     * Get all values of property {@code SpecialPropertyERRP}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodSpecialPropertyERRP(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPECIALPROPERTYERRP, Thing1.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyERRP} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodSpecialPropertyERRP_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIALPROPERTYERRP, Thing1.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyERRP}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodSpecialPropertyERRP() {
		return Base.getAll(this.model, this.getResource(), SPECIALPROPERTYERRP, Thing1.class);
	}

    /**
     * Get all values of property {@code SpecialPropertyERRP} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodSpecialPropertyERRP_as() {
		return Base.getAll_as(this.model, this.getResource(), SPECIALPROPERTYERRP, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code SpecialPropertyERRP} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodSpecialPropertyERRP(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SPECIALPROPERTYERRP, value);
	}

    /**
     * Adds a value to property {@code SpecialPropertyERRP} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodSpecialPropertyERRP(Node value) {
		Base.add(this.model, this.getResource(), SPECIALPROPERTYERRP, value);
	}
    /**
     * Adds a value to property {@code SpecialPropertyERRP} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodSpecialPropertyERRP(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, SPECIALPROPERTYERRP, value);
	}

    /**
     * Adds a value to property {@code SpecialPropertyERRP} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodSpecialPropertyERRP(Thing1 value) {
		Base.add(this.model, this.getResource(), SPECIALPROPERTYERRP, value);
	}
  

    /**
     * Sets a value of property {@code SpecialPropertyERRP} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodSpecialPropertyERRP(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SPECIALPROPERTYERRP, value);
	}

    /**
     * Sets a value of property {@code SpecialPropertyERRP} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodSpecialPropertyERRP(Node value) {
		Base.set(this.model, this.getResource(), SPECIALPROPERTYERRP, value);
	}
    /**
     * Sets a value of property {@code SpecialPropertyERRP} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodSpecialPropertyERRP(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, SPECIALPROPERTYERRP, value);
	}

    /**
     * Sets a value of property {@code SpecialPropertyERRP} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodSpecialPropertyERRP(Thing1 value) {
		Base.set(this.model, this.getResource(), SPECIALPROPERTYERRP, value);
	}
  


    /**
     * Removes a value of property {@code SpecialPropertyERRP} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodSpecialPropertyERRP(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SPECIALPROPERTYERRP, value);
	}

    /**
     * Removes a value of property {@code SpecialPropertyERRP} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodSpecialPropertyERRP(Node value) {
		Base.remove(this.model, this.getResource(), SPECIALPROPERTYERRP, value);
	}
    /**
     * Removes a value of property {@code SpecialPropertyERRP} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodSpecialPropertyERRP(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, SPECIALPROPERTYERRP, value);
	}

    /**
     * Removes a value of property {@code SpecialPropertyERRP} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodSpecialPropertyERRP(Thing1 value) {
		Base.remove(this.model, this.getResource(), SPECIALPROPERTYERRP, value);
	}
  
    /**
     * Removes all values of property {@code SpecialPropertyERRP}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodSpecialPropertyERRP(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPECIALPROPERTYERRP);
	}

    /**
     * Removes all values of property {@code SpecialPropertyERRP}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodSpecialPropertyERRP() {
		Base.removeAll(this.model, this.getResource(), SPECIALPROPERTYERRP);
	}
     /**
     * Check if {@code TermcurrentProject} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodTermcurrentProject(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TERMCURRENTPROJECT);
	}

    /**
     * Check if {@code TermcurrentProject} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodTermcurrentProject() {
		return Base.has(this.model, this.getResource(), TERMCURRENTPROJECT);
	}

    /**
     * Check if {@code TermcurrentProject} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodTermcurrentProject(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TERMCURRENTPROJECT, value);
	}

    /**
     * Check if {@code TermcurrentProject} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodTermcurrentProject( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMCURRENTPROJECT, value);
	}

     /**
     * Get all values of property {@code TermcurrentProject} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodTermcurrentProject_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMCURRENTPROJECT);
	}

    /**
     * Get all values of property {@code TermcurrentProject} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodTermcurrentProject_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMCURRENTPROJECT, Node.class);
	}

    /**
     * Get all values of property {@code TermcurrentProject} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodTermcurrentProject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMCURRENTPROJECT);
	}

    /**
     * Get all values of property {@code TermcurrentProject} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodTermcurrentProject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMCURRENTPROJECT, Node.class);
	}
 
    /**
     * Get all values of property {@code TermcurrentProject}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodTermcurrentProject(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMCURRENTPROJECT, Thing1.class);
	}

    /**
     * Get all values of property {@code TermcurrentProject} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodTermcurrentProject_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMCURRENTPROJECT, Thing1.class);
	}

    /**
     * Get all values of property {@code TermcurrentProject}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodTermcurrentProject() {
		return Base.getAll(this.model, this.getResource(), TERMCURRENTPROJECT, Thing1.class);
	}

    /**
     * Get all values of property {@code TermcurrentProject} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodTermcurrentProject_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMCURRENTPROJECT, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code TermcurrentProject} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodTermcurrentProject(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TERMCURRENTPROJECT, value);
	}

    /**
     * Adds a value to property {@code TermcurrentProject} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodTermcurrentProject(Node value) {
		Base.add(this.model, this.getResource(), TERMCURRENTPROJECT, value);
	}
    /**
     * Adds a value to property {@code TermcurrentProject} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodTermcurrentProject(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, TERMCURRENTPROJECT, value);
	}

    /**
     * Adds a value to property {@code TermcurrentProject} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodTermcurrentProject(Thing1 value) {
		Base.add(this.model, this.getResource(), TERMCURRENTPROJECT, value);
	}
  

    /**
     * Sets a value of property {@code TermcurrentProject} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodTermcurrentProject(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TERMCURRENTPROJECT, value);
	}

    /**
     * Sets a value of property {@code TermcurrentProject} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodTermcurrentProject(Node value) {
		Base.set(this.model, this.getResource(), TERMCURRENTPROJECT, value);
	}
    /**
     * Sets a value of property {@code TermcurrentProject} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodTermcurrentProject(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, TERMCURRENTPROJECT, value);
	}

    /**
     * Sets a value of property {@code TermcurrentProject} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodTermcurrentProject(Thing1 value) {
		Base.set(this.model, this.getResource(), TERMCURRENTPROJECT, value);
	}
  


    /**
     * Removes a value of property {@code TermcurrentProject} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodTermcurrentProject(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TERMCURRENTPROJECT, value);
	}

    /**
     * Removes a value of property {@code TermcurrentProject} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodTermcurrentProject(Node value) {
		Base.remove(this.model, this.getResource(), TERMCURRENTPROJECT, value);
	}
    /**
     * Removes a value of property {@code TermcurrentProject} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodTermcurrentProject(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, TERMCURRENTPROJECT, value);
	}

    /**
     * Removes a value of property {@code TermcurrentProject} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodTermcurrentProject(Thing1 value) {
		Base.remove(this.model, this.getResource(), TERMCURRENTPROJECT, value);
	}
  
    /**
     * Removes all values of property {@code TermcurrentProject}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodTermcurrentProject(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMCURRENTPROJECT);
	}

    /**
     * Removes all values of property {@code TermcurrentProject}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodTermcurrentProject() {
		Base.removeAll(this.model, this.getResource(), TERMCURRENTPROJECT);
	}
     /**
     * Check if {@code Termname} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodTermname(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TERMNAME);
	}

    /**
     * Check if {@code Termname} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodTermname() {
		return Base.has(this.model, this.getResource(), TERMNAME);
	}

    /**
     * Check if {@code Termname} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodTermname(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TERMNAME, value);
	}

    /**
     * Check if {@code Termname} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodTermname( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMNAME, value);
	}

     /**
     * Get all values of property {@code Termname} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodTermname_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMNAME);
	}

    /**
     * Get all values of property {@code Termname} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodTermname_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMNAME, Node.class);
	}

    /**
     * Get all values of property {@code Termname} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodTermname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMNAME);
	}

    /**
     * Get all values of property {@code Termname} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodTermname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMNAME, Node.class);
	}
 
    /**
     * Get all values of property {@code Termname}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodTermname(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMNAME, Thing1.class);
	}

    /**
     * Get all values of property {@code Termname} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodTermname_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMNAME, Thing1.class);
	}

    /**
     * Get all values of property {@code Termname}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodTermname() {
		return Base.getAll(this.model, this.getResource(), TERMNAME, Thing1.class);
	}

    /**
     * Get all values of property {@code Termname} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodTermname_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMNAME, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Termname} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodTermname(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TERMNAME, value);
	}

    /**
     * Adds a value to property {@code Termname} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodTermname(Node value) {
		Base.add(this.model, this.getResource(), TERMNAME, value);
	}
    /**
     * Adds a value to property {@code Termname} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodTermname(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, TERMNAME, value);
	}

    /**
     * Adds a value to property {@code Termname} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodTermname(Thing1 value) {
		Base.add(this.model, this.getResource(), TERMNAME, value);
	}
  

    /**
     * Sets a value of property {@code Termname} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodTermname(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TERMNAME, value);
	}

    /**
     * Sets a value of property {@code Termname} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodTermname(Node value) {
		Base.set(this.model, this.getResource(), TERMNAME, value);
	}
    /**
     * Sets a value of property {@code Termname} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodTermname(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, TERMNAME, value);
	}

    /**
     * Sets a value of property {@code Termname} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodTermname(Thing1 value) {
		Base.set(this.model, this.getResource(), TERMNAME, value);
	}
  


    /**
     * Removes a value of property {@code Termname} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodTermname(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TERMNAME, value);
	}

    /**
     * Removes a value of property {@code Termname} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodTermname(Node value) {
		Base.remove(this.model, this.getResource(), TERMNAME, value);
	}
    /**
     * Removes a value of property {@code Termname} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodTermname(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, TERMNAME, value);
	}

    /**
     * Removes a value of property {@code Termname} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodTermname(Thing1 value) {
		Base.remove(this.model, this.getResource(), TERMNAME, value);
	}
  
    /**
     * Removes all values of property {@code Termname}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodTermname(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMNAME);
	}

    /**
     * Removes all values of property {@code Termname}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodTermname() {
		Base.removeAll(this.model, this.getResource(), TERMNAME);
	}
     /**
     * Check if {@code Type} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodType(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, TYPE);
	}

    /**
     * Check if {@code Type} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodType() {
		return Base.has(this.model, this.getResource(), TYPE);
	}

    /**
     * Check if {@code Type} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodType(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, TYPE, value);
	}

    /**
     * Check if {@code Type} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodType( Node value ) {
		return Base.hasValue(this.model, this.getResource(), TYPE, value);
	}

     /**
     * Get all values of property {@code Type} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodType_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TYPE);
	}

    /**
     * Get all values of property {@code Type} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodType_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TYPE, Node.class);
	}

    /**
     * Get all values of property {@code Type} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TYPE);
	}

    /**
     * Get all values of property {@code Type} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TYPE, Node.class);
	}
 
    /**
     * Get all values of property {@code Type}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodType(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, TYPE, Thing1.class);
	}

    /**
     * Get all values of property {@code Type} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodType_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TYPE, Thing1.class);
	}

    /**
     * Get all values of property {@code Type}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodType() {
		return Base.getAll(this.model, this.getResource(), TYPE, Thing1.class);
	}

    /**
     * Get all values of property {@code Type} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodType_as() {
		return Base.getAll_as(this.model, this.getResource(), TYPE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code Type} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodType(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, TYPE, value);
	}

    /**
     * Adds a value to property {@code Type} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodType(Node value) {
		Base.add(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Adds a value to property {@code Type} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodType(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, TYPE, value);
	}

    /**
     * Adds a value to property {@code Type} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodType(Thing1 value) {
		Base.add(this.model, this.getResource(), TYPE, value);
	}
  

    /**
     * Sets a value of property {@code Type} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodType(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, TYPE, value);
	}

    /**
     * Sets a value of property {@code Type} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodType(Node value) {
		Base.set(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Sets a value of property {@code Type} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodType(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, TYPE, value);
	}

    /**
     * Sets a value of property {@code Type} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodType(Thing1 value) {
		Base.set(this.model, this.getResource(), TYPE, value);
	}
  


    /**
     * Removes a value of property {@code Type} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodType(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, TYPE, value);
	}

    /**
     * Removes a value of property {@code Type} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodType(Node value) {
		Base.remove(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Removes a value of property {@code Type} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodType(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, TYPE, value);
	}

    /**
     * Removes a value of property {@code Type} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodType(Thing1 value) {
		Base.remove(this.model, this.getResource(), TYPE, value);
	}
  
    /**
     * Removes all values of property {@code Type}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodType(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, TYPE);
	}

    /**
     * Removes all values of property {@code Type}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodType() {
		Base.removeAll(this.model, this.getResource(), TYPE);
	}
     /**
     * Check if {@code WikiNamespace} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodWikiNamespace(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, WIKINAMESPACE);
	}

    /**
     * Check if {@code WikiNamespace} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodWikiNamespace() {
		return Base.has(this.model, this.getResource(), WIKINAMESPACE);
	}

    /**
     * Check if {@code WikiNamespace} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodWikiNamespace(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, WIKINAMESPACE, value);
	}

    /**
     * Check if {@code WikiNamespace} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodWikiNamespace( Node value ) {
		return Base.hasValue(this.model, this.getResource(), WIKINAMESPACE, value);
	}

     /**
     * Get all values of property {@code WikiNamespace} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodWikiNamespace_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WIKINAMESPACE);
	}

    /**
     * Get all values of property {@code WikiNamespace} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodWikiNamespace_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKINAMESPACE, Node.class);
	}

    /**
     * Get all values of property {@code WikiNamespace} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodWikiNamespace_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WIKINAMESPACE);
	}

    /**
     * Get all values of property {@code WikiNamespace} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodWikiNamespace_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WIKINAMESPACE, Node.class);
	}
 
    /**
     * Get all values of property {@code WikiNamespace}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodWikiNamespace(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, WIKINAMESPACE, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiNamespace} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodWikiNamespace_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKINAMESPACE, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiNamespace}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodWikiNamespace() {
		return Base.getAll(this.model, this.getResource(), WIKINAMESPACE, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiNamespace} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodWikiNamespace_as() {
		return Base.getAll_as(this.model, this.getResource(), WIKINAMESPACE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code WikiNamespace} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodWikiNamespace(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, WIKINAMESPACE, value);
	}

    /**
     * Adds a value to property {@code WikiNamespace} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodWikiNamespace(Node value) {
		Base.add(this.model, this.getResource(), WIKINAMESPACE, value);
	}
    /**
     * Adds a value to property {@code WikiNamespace} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodWikiNamespace(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, WIKINAMESPACE, value);
	}

    /**
     * Adds a value to property {@code WikiNamespace} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodWikiNamespace(Thing1 value) {
		Base.add(this.model, this.getResource(), WIKINAMESPACE, value);
	}
  

    /**
     * Sets a value of property {@code WikiNamespace} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodWikiNamespace(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, WIKINAMESPACE, value);
	}

    /**
     * Sets a value of property {@code WikiNamespace} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodWikiNamespace(Node value) {
		Base.set(this.model, this.getResource(), WIKINAMESPACE, value);
	}
    /**
     * Sets a value of property {@code WikiNamespace} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodWikiNamespace(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, WIKINAMESPACE, value);
	}

    /**
     * Sets a value of property {@code WikiNamespace} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodWikiNamespace(Thing1 value) {
		Base.set(this.model, this.getResource(), WIKINAMESPACE, value);
	}
  


    /**
     * Removes a value of property {@code WikiNamespace} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodWikiNamespace(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, WIKINAMESPACE, value);
	}

    /**
     * Removes a value of property {@code WikiNamespace} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodWikiNamespace(Node value) {
		Base.remove(this.model, this.getResource(), WIKINAMESPACE, value);
	}
    /**
     * Removes a value of property {@code WikiNamespace} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodWikiNamespace(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, WIKINAMESPACE, value);
	}

    /**
     * Removes a value of property {@code WikiNamespace} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodWikiNamespace(Thing1 value) {
		Base.remove(this.model, this.getResource(), WIKINAMESPACE, value);
	}
  
    /**
     * Removes all values of property {@code WikiNamespace}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodWikiNamespace(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, WIKINAMESPACE);
	}

    /**
     * Removes all values of property {@code WikiNamespace}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodWikiNamespace() {
		Base.removeAll(this.model, this.getResource(), WIKINAMESPACE);
	}
     /**
     * Check if {@code WikiPageModificationDate} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodWikiPageModificationDate(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, WIKIPAGEMODIFICATIONDATE);
	}

    /**
     * Check if {@code WikiPageModificationDate} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodWikiPageModificationDate() {
		return Base.has(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE);
	}

    /**
     * Check if {@code WikiPageModificationDate} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodWikiPageModificationDate(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, WIKIPAGEMODIFICATIONDATE, value);
	}

    /**
     * Check if {@code WikiPageModificationDate} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodWikiPageModificationDate( Node value ) {
		return Base.hasValue(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, value);
	}

     /**
     * Get all values of property {@code WikiPageModificationDate} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodWikiPageModificationDate_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WIKIPAGEMODIFICATIONDATE);
	}

    /**
     * Get all values of property {@code WikiPageModificationDate} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodWikiPageModificationDate_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKIPAGEMODIFICATIONDATE, Node.class);
	}

    /**
     * Get all values of property {@code WikiPageModificationDate} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodWikiPageModificationDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE);
	}

    /**
     * Get all values of property {@code WikiPageModificationDate} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodWikiPageModificationDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, Node.class);
	}
 
    /**
     * Get all values of property {@code WikiPageModificationDate}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodWikiPageModificationDate(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, WIKIPAGEMODIFICATIONDATE, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiPageModificationDate} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodWikiPageModificationDate_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKIPAGEMODIFICATIONDATE, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiPageModificationDate}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodWikiPageModificationDate() {
		return Base.getAll(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiPageModificationDate} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodWikiPageModificationDate_as() {
		return Base.getAll_as(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code WikiPageModificationDate} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodWikiPageModificationDate(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, WIKIPAGEMODIFICATIONDATE, value);
	}

    /**
     * Adds a value to property {@code WikiPageModificationDate} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodWikiPageModificationDate(Node value) {
		Base.add(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, value);
	}
    /**
     * Adds a value to property {@code WikiPageModificationDate} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodWikiPageModificationDate(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, WIKIPAGEMODIFICATIONDATE, value);
	}

    /**
     * Adds a value to property {@code WikiPageModificationDate} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodWikiPageModificationDate(Thing1 value) {
		Base.add(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, value);
	}
  

    /**
     * Sets a value of property {@code WikiPageModificationDate} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodWikiPageModificationDate(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, WIKIPAGEMODIFICATIONDATE, value);
	}

    /**
     * Sets a value of property {@code WikiPageModificationDate} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodWikiPageModificationDate(Node value) {
		Base.set(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, value);
	}
    /**
     * Sets a value of property {@code WikiPageModificationDate} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodWikiPageModificationDate(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, WIKIPAGEMODIFICATIONDATE, value);
	}

    /**
     * Sets a value of property {@code WikiPageModificationDate} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodWikiPageModificationDate(Thing1 value) {
		Base.set(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, value);
	}
  


    /**
     * Removes a value of property {@code WikiPageModificationDate} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodWikiPageModificationDate(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, WIKIPAGEMODIFICATIONDATE, value);
	}

    /**
     * Removes a value of property {@code WikiPageModificationDate} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodWikiPageModificationDate(Node value) {
		Base.remove(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, value);
	}
    /**
     * Removes a value of property {@code WikiPageModificationDate} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodWikiPageModificationDate(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, WIKIPAGEMODIFICATIONDATE, value);
	}

    /**
     * Removes a value of property {@code WikiPageModificationDate} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodWikiPageModificationDate(Thing1 value) {
		Base.remove(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE, value);
	}
  
    /**
     * Removes all values of property {@code WikiPageModificationDate}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodWikiPageModificationDate(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, WIKIPAGEMODIFICATIONDATE);
	}

    /**
     * Removes all values of property {@code WikiPageModificationDate}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodWikiPageModificationDate() {
		Base.removeAll(this.model, this.getResource(), WIKIPAGEMODIFICATIONDATE);
	}
     /**
     * Check if {@code WikiPageSortKey} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasmodWikiPageSortKey(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, WIKIPAGESORTKEY);
	}

    /**
     * Check if {@code WikiPageSortKey} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasmodWikiPageSortKey() {
		return Base.has(this.model, this.getResource(), WIKIPAGESORTKEY);
	}

    /**
     * Check if {@code WikiPageSortKey} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasmodWikiPageSortKey(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, WIKIPAGESORTKEY, value);
	}

    /**
     * Check if {@code WikiPageSortKey} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasmodWikiPageSortKey( Node value ) {
		return Base.hasValue(this.model, this.getResource(), WIKIPAGESORTKEY, value);
	}

     /**
     * Get all values of property {@code WikiPageSortKey} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllmodWikiPageSortKey_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WIKIPAGESORTKEY);
	}

    /**
     * Get all values of property {@code WikiPageSortKey} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllmodWikiPageSortKey_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKIPAGESORTKEY, Node.class);
	}

    /**
     * Get all values of property {@code WikiPageSortKey} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllmodWikiPageSortKey_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WIKIPAGESORTKEY);
	}

    /**
     * Get all values of property {@code WikiPageSortKey} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllmodWikiPageSortKey_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WIKIPAGESORTKEY, Node.class);
	}
 
    /**
     * Get all values of property {@code WikiPageSortKey}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Thing1> getAllmodWikiPageSortKey(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, WIKIPAGESORTKEY, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiPageSortKey} as a ReactorResult of {@linkplain Thing1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Thing1> getAllmodWikiPageSortKey_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKIPAGESORTKEY, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiPageSortKey}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Thing1> getAllmodWikiPageSortKey() {
		return Base.getAll(this.model, this.getResource(), WIKIPAGESORTKEY, Thing1.class);
	}

    /**
     * Get all values of property {@code WikiPageSortKey} as a ReactorResult of {@linkplain Thing1}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Thing1> getAllmodWikiPageSortKey_as() {
		return Base.getAll_as(this.model, this.getResource(), WIKIPAGESORTKEY, Thing1.class);
	}

 
    /**
     * Adds a value to property {@code WikiPageSortKey} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addmodWikiPageSortKey(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, WIKIPAGESORTKEY, value);
	}

    /**
     * Adds a value to property {@code WikiPageSortKey} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addmodWikiPageSortKey(Node value) {
		Base.add(this.model, this.getResource(), WIKIPAGESORTKEY, value);
	}
    /**
     * Adds a value to property {@code WikiPageSortKey} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addmodWikiPageSortKey(Model model, Resource instanceResource, Thing1 value) {
		Base.add(model, instanceResource, WIKIPAGESORTKEY, value);
	}

    /**
     * Adds a value to property {@code WikiPageSortKey} from an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addmodWikiPageSortKey(Thing1 value) {
		Base.add(this.model, this.getResource(), WIKIPAGESORTKEY, value);
	}
  

    /**
     * Sets a value of property {@code WikiPageSortKey} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setmodWikiPageSortKey(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, WIKIPAGESORTKEY, value);
	}

    /**
     * Sets a value of property {@code WikiPageSortKey} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setmodWikiPageSortKey(Node value) {
		Base.set(this.model, this.getResource(), WIKIPAGESORTKEY, value);
	}
    /**
     * Sets a value of property {@code WikiPageSortKey} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setmodWikiPageSortKey(Model model, Resource instanceResource, Thing1 value) {
		Base.set(model, instanceResource, WIKIPAGESORTKEY, value);
	}

    /**
     * Sets a value of property {@code WikiPageSortKey} from an instance of {@linkplain Thing1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setmodWikiPageSortKey(Thing1 value) {
		Base.set(this.model, this.getResource(), WIKIPAGESORTKEY, value);
	}
  


    /**
     * Removes a value of property {@code WikiPageSortKey} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removemodWikiPageSortKey(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, WIKIPAGESORTKEY, value);
	}

    /**
     * Removes a value of property {@code WikiPageSortKey} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removemodWikiPageSortKey(Node value) {
		Base.remove(this.model, this.getResource(), WIKIPAGESORTKEY, value);
	}
    /**
     * Removes a value of property {@code WikiPageSortKey} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removemodWikiPageSortKey(Model model, Resource instanceResource, Thing1 value) {
		Base.remove(model, instanceResource, WIKIPAGESORTKEY, value);
	}

    /**
     * Removes a value of property {@code WikiPageSortKey} given as an instance of {@linkplain Thing1}.
     * Comment from schema: This class acts as a catch-all for all properties, for which no domain has specified.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removemodWikiPageSortKey(Thing1 value) {
		Base.remove(this.model, this.getResource(), WIKIPAGESORTKEY, value);
	}
  
    /**
     * Removes all values of property {@code WikiPageSortKey}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllmodWikiPageSortKey(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, WIKIPAGESORTKEY);
	}

    /**
     * Removes all values of property {@code WikiPageSortKey}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllmodWikiPageSortKey() {
		Base.removeAll(this.model, this.getResource(), WIKIPAGESORTKEY);
	}
 }